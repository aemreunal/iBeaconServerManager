apply plugin: 'java'

sourceCompatibility = 1.7
version = '1.0'
def manifestVersion = '1.0'
def vendor = 'Ahmet Emre Unal'
def mainClass = 'com.aemreunal.Manager'

def unirestVersion = '1.3.20'
def jacksonCoreVersion = '2.4.1.1'
def wrapperGradleVersion = '2.0'
def jsonPathVersion = '0.9.1'
def jsonVersion = '20140107'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile group: 'com.mashape.unirest', name: 'unirest-java', version: unirestVersion

//    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonCoreVersion
//    compile group: 'com.jayway.jsonpath', name: 'json-path', version: jsonPathVersion
    compile group: 'org.json', name: 'json', version: jsonVersion

    testCompile group: 'junit', name: 'junit', version: '4.11'
}

task wrapper(type: Wrapper) {
    gradleVersion = wrapperGradleVersion
}

jar {
    manifest {
        def manifestClasspath = configurations.runtime.files.collect {
            File file = it
            "lib/${file.name}"
        }.join(' ')


        configurations.runtime.getAllDependencies().withType(ProjectDependency).each { dep ->
            def depProj = dep.getDependencyProject()
            def libFilePaths = project(depProj.path).libsDir.list().collect { inFile -> "lib/${inFile}" }.join(' ')
            logger.info "Adding libs from project ${depProj.name}: [- ${libFilePaths} -]"
            manifestClasspath += ' ' + libFilePaths
        }

        logger.lifecycle("")
        logger.lifecycle("---Manifest-Class-Path: ${manifestClasspath}")

        attributes 'Main-Class': mainClass,
                'Manifest-Version': manifestVersion,
                'Created-By': vendor,
                'Specification-Title': rootProject.name,
                'Specification-Version': version,
                'Specification-Vendor': vendor,
                'Implementation-Title': rootProject.name,
                'Implementation-Version': version,
                'Implementation-Vendor': vendor,
                'Class-Path': manifestClasspath
    }

}

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyToLib(type: Copy) {
    into "$buildDir/libs/lib"
    from configurations.runtime
}

build.dependsOn(copyToLib)
assemble.dependsOn(copyToLib)

println "Project is located in: " + projectDir
