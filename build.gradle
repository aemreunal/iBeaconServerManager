buildscript {
    def gradleVersionsPluginVersion = '0.8'

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "http://download.java.net/maven/2"
        }
        maven {
            url 'http://repo.spring.io/plugins-release'
        }
    }

    // Dependencies used for building the gradle script itself
    dependencies {
        classpath "com.github.ben-manes:gradle-versions-plugin:${gradleVersionsPluginVersion}"
    }
}

apply plugin: 'java'
apply plugin: 'com.github.ben-manes.versions' // https://github.com/ben-manes/gradle-versions-plugin

sourceCompatibility = 1.8
version = 'b1.1'
def manifestVersion = version
def vendor = 'Ahmet Emre Ãœnal'
def mainClass = 'com.aemreunal.iBeaconServerManager'

def unirestVersion = '1.4.5'
def commonsIoVersion = '2.4'
def wrapperGradleVersion = '2.3'
def jsonVersion = '20141113'

repositories {
    mavenCentral()
    jcenter()
    flatDir {
        dirs 'libs'
    }
}

dependencies {
//    compile group: 'com.mashape.unirest', name: 'unirest-java', version: unirestVersion

    // Custom Unirest
    compile name: 'unirest-java-1.4.6-custom'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.apache.httpcomponents', name: 'httpasyncclient', version: '4.0.2'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.3.6'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.3.6'

    compile group: 'org.json', name: 'json', version: jsonVersion
    compile group: 'commons-io', name: 'commons-io', version: commonsIoVersion
}

task wrapper(type: Wrapper) {
    gradleVersion = wrapperGradleVersion
}

jar {
    manifest {
        def manifestClasspath = configurations.runtime.files.collect {
            File file = it
            "lib/${file.name}"
        }.join(' ')
        configurations.runtime.getAllDependencies().withType(ProjectDependency).each { dep ->
            def depProj = dep.getDependencyProject()
            def libFilePaths = project(depProj.path).libsDir.list().collect { inFile -> "lib/${inFile}" }.join(' ')
            logger.info "Adding libs from project ${depProj.name}: [- ${libFilePaths} -]"
            manifestClasspath += ' ' + libFilePaths
        }

        logger.lifecycle("")
        logger.lifecycle("---Manifest-Class-Path: ${manifestClasspath}")

        attributes 'Main-Class': mainClass,
                'Manifest-Version': manifestVersion,
                'Created-By': vendor,
                'Specification-Title': rootProject.name,
                'Specification-Version': version,
                'Specification-Vendor': vendor,
                'Implementation-Title': rootProject.name,
                'Implementation-Version': version,
                'Implementation-Vendor': vendor,
                'Class-Path': manifestClasspath
    }

}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': mainClass,
                'Manifest-Version': manifestVersion,
                'Created-By': vendor,
                'Specification-Title': rootProject.name,
                'Specification-Version': version,
                'Specification-Vendor': vendor,
                'Implementation-Title': rootProject.name,
                'Implementation-Version': version,
                'Implementation-Vendor': vendor
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyToLib(type: Copy) {
    into "$buildDir/libs/lib"
    from configurations.runtime
}

build.dependsOn(copyToLib)
assemble.dependsOn(copyToLib)

println "Project is located in: " + projectDir
